{"version":3,"sources":["types/enums/GameSettingsActionEnum.ts","components/header/Header.jsx","views/home/Home.tsx","hooks/useGameSettings.ts","components/cell/Cell.tsx","components/game-board/GameBoard.tsx","constants/generalConstants.ts","utils/tetrominoes/BaseTetromino.ts","utils/tetrominoes/Tetromino_T.ts","utils/tetrominoes/Tetromino_D.ts","utils/tetrominoes/Tetromino_S.ts","utils/tetrominoes/Tetromino_Z.ts","utils/tetrominoes/Tetromino_I.ts","utils/tetrominoes/Tetromino_L.ts","utils/tetrominoes/Tetromino_J.ts","utils/tetrominoes/TetrominoBuilder.ts","utils/cellUtil.ts","components/keyboard-manager/KeyboardManager.tsx","views/play/Play.tsx","views/settings/Settings.tsx","routes/index.tsx","views/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["GameSettingsActionEnum","Header","className","to","Home","onClick","window","open","initialState","cellRowCount","cellColCount","cellRadius","boardWidth","boardHeight","cellWidth","cellHeight","speed","gameSettingsReducer","state","action","type","UPDATE_ROW_COUNT","payload","UPDATE_COL_COUNT","UPDATE_SPEED","UPDATE_RADIUS","UPDATE_BOARD_WIDTH","UPDATE_BOARD_HEIGHT","RESET_SETTINGS","GameSettingsContext","createContext","gameSettings","JSON","parse","localStorage","getItem","updateRowCount","updateColCount","updateCellRadius","updateBoardWidth","updateBoardHeight","updateAnimationSpeed","resetSettings","Cell","xPosition","yPosition","color","useContext","width","height","x","y","rx","ry","fill","renderCells","cells","map","key","GameBoard","showGrid","tetromino","svgRef","useRef","useState","setSize","useLayoutEffect","updateSize","gameBoardHeight","innerHeight","newWidth","newHeight","innerWidth","pageMargin","current","addEventListener","removeEventListener","ref","viewBox","id","separators","index","push","x1","y1","x2","y2","generateSeparators","getCells","TETROMINO_COLOR_PALLETTE","BaseTetromino","centerCell","stateCount","currentState","this","cell","nextState","cellStates","xMovement","yMovement","others","Tetromino_T","getNeighborCell","Tetromino","Tetromino_D","Tetromino_S","Tetromino_Z","Tetromino_I","Tetromino_L","Tetromino_J","TetrominoBuilder","buildNextTetromino","Math","round","random","length","tetrominoes","generateTetromino","floor","getTetromino","getNeighborCells","moveLeft","every","moveTetromino","moveRight","moveDown","checkCollision","upcomingCells","anyCollision","some","upcomingCell","cellsIncludes","isAtBottomEdge","isExceedRightSide","isExceedLeftSide","otherCell","clearFullRows","colCounts","Array","row","filter","toGameSpeed","NORMAL_GAME_SPEED","KeyboardManager","props","pressedKey","middleEl","onKeyDown","pressedKeys","onKeysChanged","includes","onKeyUp","onClickButton","event","middleElBounds","getBoundingClientRect","middleXPos","left","middleYPos","top","xPosDifference","touches","clientX","yPosDifference","clientY","abs","setState","generateClassName","React","createRef","containerClassNames","prefixes","split","query","matchMedia","matches","mq","join","is_touch_device","onTouchEnd","onTouchStart","Component","Play","isGameOver","isGameStart","undefined","lastTime","animationFrame","gameLoop","time","newTetromino","gameOver","requestAnimationFrame","keys","computeNewPosition","toggleGameStart","getNextStateCells","restartGame","cancelAnimationFrame","Settings","htmlFor","value","onChange","e","Number","target","name","checked","document","getElementById","showModal","method","Routes","basename","process","exact","path","component","App","useReducer","dispatch","setItem","stringify","useGameSettings","Provider","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98076810.chunk.js","sourcesContent":["export enum GameSettingsActionEnum {\n  UPDATE_BOARD_WIDTH = 'UPDATE_BOARD_WIDTH',\n  UPDATE_BOARD_HEIGHT = 'UPDATE_BOARD_HEIGHT',\n  UPDATE_ROW_COUNT = 'UPDATE_ROW_COUNT',\n  UPDATE_COL_COUNT = 'UPDATE_COL_COUNT',\n  UPDATE_SPEED = 'UPDATE_SPEED',\n  UPDATE_RADIUS = 'UPDATE_RADIUS',\n  RESET_SETTINGS = 'RESET_SETTINGS',\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Header.scss';\n\nconst Header = () => (\n  <header className=\"app-header\">\n    <Link className=\"app-header-link\" to=\"/\">\n      Homepage\n    </Link>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './home.scss';\n\nconst Home: React.FC = () => {\n  return (\n    <div className=\"home-container\">\n      <div className=\"nes-container with-title is-centered\">\n        <p className=\"title nes-text is-primary\">Welcome Tetris Game!</p>\n        <div className=\"nes-container-body\">\n          <Link className=\"app-header-link\" to=\"/play\">\n            Play\n          </Link>\n          <Link className=\"app-header-link\" to=\"/settings\">\n            Settings\n          </Link>\n        </div>\n      </div>\n      <div\n        className=\"github-link nes-pointer\"\n        onClick={() =>\n          window.open('https://github.com/tarsusi/tetris', '_blank')\n        }\n      >\n        <i className=\"nes-octocat animate\"></i>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import { useReducer, createContext } from 'react';\nimport { IGameSettings } from 'types/interfaces/IGameSettings';\nimport { SpeedSetting } from 'types';\nimport { GameSettingsActionEnum } from 'types/enums/GameSettingsActionEnum';\n\nexport const initialState: IGameSettings = {\n  cellRowCount: 16,\n  cellColCount: 12,\n  cellRadius: 4,\n  boardWidth: 1200,\n  boardHeight: 1600,\n  cellWidth: 100,\n  cellHeight: 100,\n  speed: 'normal',\n};\n\nfunction gameSettingsReducer(\n  state: IGameSettings,\n  action:\n    | { type: GameSettingsActionEnum; payload?: number }\n    | { type: GameSettingsActionEnum; payload?: SpeedSetting },\n): IGameSettings {\n  switch (action.type) {\n    case GameSettingsActionEnum.UPDATE_ROW_COUNT:\n      return {\n        ...state,\n        cellRowCount: action.payload as number,\n        cellHeight: state.boardHeight / (action.payload as number),\n      };\n    case GameSettingsActionEnum.UPDATE_COL_COUNT:\n      return {\n        ...state,\n        cellColCount: action.payload as number,\n        cellWidth: state.boardWidth / (action.payload as number),\n      };\n    case GameSettingsActionEnum.UPDATE_SPEED:\n      return {\n        ...state,\n        speed: action.payload as SpeedSetting,\n      };\n    case GameSettingsActionEnum.UPDATE_RADIUS:\n      return {\n        ...state,\n        cellRadius: action.payload as number,\n      };\n    case GameSettingsActionEnum.UPDATE_BOARD_WIDTH:\n      return {\n        ...state,\n        boardWidth: action.payload as number,\n        cellWidth: (action.payload as number) / state.cellColCount,\n      };\n    case GameSettingsActionEnum.UPDATE_BOARD_HEIGHT:\n      return {\n        ...state,\n        boardHeight: action.payload as number,\n        cellHeight: (action.payload as number) / state.cellRowCount,\n      };\n    case GameSettingsActionEnum.RESET_SETTINGS:\n      return initialState;\n    default:\n      return state;\n  }\n}\n\nexport const GameSettingsContext = createContext({\n  gameSettings:\n    JSON.parse(localStorage.getItem('gameSettings') as string) || initialState,\n  updateRowCount: (cellRowCount: number) => {},\n  updateColCount: (cellColCount: number) => {},\n  updateCellRadius: (cellRadius: number) => {},\n  updateBoardWidth: (boardWidth: number) => {},\n  updateBoardHeight: (boardHeight: number) => {},\n  updateAnimationSpeed: (speed: SpeedSetting) => {},\n  resetSettings: () => {},\n});\n\nexport const useGameSettings = () => {\n  const [gameSettings, dispatch] = useReducer(\n    gameSettingsReducer,\n    JSON.parse(localStorage.getItem('gameSettings') as string) || initialState,\n  );\n\n  localStorage.setItem('gameSettings', JSON.stringify(gameSettings));\n\n  return {\n    gameSettings,\n    resetSettings: () => {\n      dispatch({\n        type: GameSettingsActionEnum.RESET_SETTINGS,\n      });\n    },\n    updateRowCount: (cellRowCount: number) =>\n      dispatch({\n        type: GameSettingsActionEnum.UPDATE_ROW_COUNT,\n        payload: cellRowCount,\n      }),\n    updateColCount: (cellColCount: number) =>\n      dispatch({\n        type: GameSettingsActionEnum.UPDATE_COL_COUNT,\n        payload: cellColCount,\n      }),\n    updateCellRadius: (cellRadius: number) =>\n      dispatch({\n        type: GameSettingsActionEnum.UPDATE_RADIUS,\n        payload: cellRadius,\n      }),\n    updateBoardWidth: (boardWidth: number) =>\n      dispatch({\n        type: GameSettingsActionEnum.UPDATE_BOARD_WIDTH,\n        payload: boardWidth,\n      }),\n    updateBoardHeight: (boardHeight: number) =>\n      dispatch({\n        type: GameSettingsActionEnum.UPDATE_BOARD_HEIGHT,\n        payload: boardHeight,\n      }),\n    updateAnimationSpeed: (speed: SpeedSetting) =>\n      dispatch({\n        type: GameSettingsActionEnum.UPDATE_SPEED,\n        payload: speed,\n      }),\n  };\n};\n","import React, { useContext } from 'react';\nimport './cell.scss';\nimport { GameSettingsContext } from 'hooks/useGameSettings';\nimport { ICellProps } from 'types/interfaces/ICellProps';\n\nexport const Cell: React.FC<ICellProps> = ({\n  xPosition,\n  yPosition,\n  color = 'red',\n}) => {\n  const {\n    gameSettings: { cellWidth, cellHeight, cellRadius },\n  } = useContext(GameSettingsContext);\n  return (\n    <rect\n      className=\"game-cell\"\n      width={cellWidth}\n      height={cellHeight}\n      x={xPosition * cellWidth}\n      y={yPosition * cellHeight}\n      rx={cellRadius}\n      ry={cellRadius}\n      fill={color}\n    ></rect>\n  );\n};\n","import React, { useState, useLayoutEffect, useRef, useContext } from 'react';\n\nimport { Cell } from 'components/cell/Cell';\n\nimport { IBoardCell } from 'types/interfaces/IBoardCell';\nimport { IGameBoardProps } from 'types/interfaces/IGameBoardProps';\n\nimport { GameSettingsContext } from 'hooks/useGameSettings';\n\nimport './game-board.scss';\n\nconst generateSeparators = (\n  boardWidth: number,\n  boardHeight: number,\n  cellColCount: number,\n  cellRowCount: number,\n) => {\n  const separators = [];\n\n  for (let index = 0; index < boardWidth; index += boardWidth / cellColCount) {\n    separators.push(\n      <line\n        key={`vertical-separator-${index}`}\n        className=\"separator\"\n        x1={index}\n        y1={0}\n        x2={index}\n        y2={boardHeight}\n      ></line>,\n    );\n  }\n\n  for (\n    let index = 0;\n    index < boardHeight;\n    index += boardHeight / cellRowCount\n  ) {\n    separators.push(\n      <line\n        key={`horizontal-separator-${index}`}\n        className=\"separator\"\n        x1={0}\n        y1={index}\n        x2={boardWidth}\n        y2={index}\n      ></line>,\n    );\n  }\n\n  return separators;\n};\n\nconst renderCells = (cells?: IBoardCell[]) => {\n  return (\n    cells &&\n    cells.map(({ xPosition, yPosition, color }) => (\n      <Cell\n        key={`board-cell-${xPosition}-${yPosition}`}\n        xPosition={xPosition}\n        yPosition={yPosition}\n        color={color}\n      ></Cell>\n    ))\n  );\n};\n\nconst GameBoard: React.FC<IGameBoardProps> = ({\n  cells,\n  showGrid,\n  tetromino,\n}) => {\n  let svgRef: any = useRef(null);\n  const [[width, height], setSize] = useState([0, 0]);\n  const { gameSettings } = useContext(GameSettingsContext);\n  useLayoutEffect(() => {\n    const updateSize = () => {\n      const aspectRatio = 4 / 3;\n      const pageMargin = 24;\n      const wH = window.innerHeight;\n      const gameBoardHeight = wH - 160;\n\n      let newWidth = gameBoardHeight / aspectRatio;\n      let newHeight = gameBoardHeight;\n      if (newWidth > window.innerWidth - pageMargin * 2) {\n        newWidth = window.innerWidth - pageMargin * 2;\n        newHeight = newWidth * aspectRatio;\n      }\n\n      if (svgRef && svgRef.current) {\n        setSize([newWidth, newHeight]);\n      } else {\n        setSize([0, 0]);\n      }\n    };\n\n    window.addEventListener('resize', updateSize);\n\n    updateSize();\n\n    return () => window.removeEventListener('resize', updateSize);\n  }, [svgRef]);\n\n  return (\n    <svg\n      ref={svgRef}\n      width={width}\n      height={height}\n      viewBox={`0 0 ${gameSettings.boardWidth} ${gameSettings.boardHeight}`}\n      id=\"game-board\"\n    >\n      {showGrid && (\n        <g id=\"separators\">\n          {generateSeparators(\n            gameSettings.boardWidth,\n            gameSettings.boardHeight,\n            gameSettings.cellColCount,\n            gameSettings.cellRowCount,\n          )}\n        </g>\n      )}\n      <g id=\"objects\">\n        {tetromino && renderCells(tetromino.getCells())}\n        {renderCells(cells)}\n      </g>\n    </svg>\n  );\n};\n\nexport default GameBoard;\n","export const NORMAL_GAME_SPEED = 1000;\n\n// these color codes are taken from https://jariz.github.io/vibrant.js/\nexport const TETROMINO_COLOR_PALLETTE = [\n  'rgb(227, 76, 74)',\n  'rgb(100, 106, 80)',\n  'rgb(6, 54, 42)',\n  'rgb(85, 123, 105)',\n  'rgb(132, 124, 140)',\n  'rgb(60, 30, 24)',\n  'rgb(222, 86, 184)',\n  'rgb(44, 65, 167)',\n  'rgb(207, 157, 19)',\n  'rgb(102, 99, 92)',\n  'rgb(97, 116, 205)',\n  'rgb(108, 87, 88)',\n  'rgb(66, 60, 141)',\n  'rgb(199, 176, 96)',\n];\n","import { IBoardCell } from 'types/interfaces/IBoardCell';\n\nexport default abstract class BaseTetromino {\n  abstract cellStates(centerCell: IBoardCell): IBoardCell[][];\n  abstract stateCount: number;\n\n  protected cells: IBoardCell[] = [];\n  protected centerCell: IBoardCell;\n  protected currentState: number = 0;\n\n  constructor(centerCell: IBoardCell) {\n    this.centerCell = centerCell;\n  }\n\n  public getCells(): IBoardCell[] {\n    return this.cells.map((cell) => ({ ...cell }));\n  }\n\n  public getNextStateCells(): IBoardCell[] {\n    const nextState = (this.currentState + 1) % this.stateCount;\n\n    return this.cellStates(this.centerCell)[nextState];\n  }\n\n  public moveTetromino(xMovement: number, yMovement: number): BaseTetromino {\n    this.cells = this.cells.map(({ xPosition, yPosition, ...others }) => ({\n      ...others,\n      xPosition: xPosition + xMovement,\n      yPosition: yPosition + yMovement,\n    }));\n\n    this.centerCell = {\n      ...this.centerCell,\n      xPosition: this.centerCell.xPosition + xMovement,\n      yPosition: this.centerCell.yPosition + yMovement,\n    };\n\n    return this;\n  }\n\n  public nextState() {\n    this.currentState = (this.currentState + 1) % this.stateCount;\n    this.cells = this.cellStates(this.centerCell)[this.currentState];\n\n    return this;\n  }\n}\n","import Tetromino from './BaseTetromino';\nimport { IBoardCell } from 'types/interfaces/IBoardCell';\nimport { getNeighborCell } from 'utils/cellUtil';\n\nexport default class Tetromino_T extends Tetromino {\n  cellStates = (centerCell: IBoardCell) => [\n    [\n      centerCell,\n      getNeighborCell(centerCell, 1, 0),\n      getNeighborCell(centerCell, -1, 0),\n      getNeighborCell(centerCell, 0, 1),\n    ],\n    [\n      centerCell,\n      getNeighborCell(centerCell, 0, -1),\n      getNeighborCell(centerCell, 1, 0),\n      getNeighborCell(centerCell, 0, 1),\n    ],\n    [\n      centerCell,\n      getNeighborCell(centerCell, 1, 0),\n      getNeighborCell(centerCell, -1, 0),\n      getNeighborCell(centerCell, 0, -1),\n    ],\n    [\n      centerCell,\n      getNeighborCell(centerCell, 0, -1),\n      getNeighborCell(centerCell, -1, 0),\n      getNeighborCell(centerCell, 0, 1),\n    ],\n  ];\n\n  stateCount = 4;\n\n  constructor(centerCell: IBoardCell) {\n    super(centerCell);\n\n    this.cells = this.cellStates(this.centerCell)[this.currentState];\n  }\n}\n","import { IBoardCell } from 'types/interfaces/IBoardCell';\n\nimport Tetromino from './BaseTetromino';\nimport { getNeighborCell } from 'utils/cellUtil';\n\nexport default class Tetromino_D extends Tetromino {\n  cellStates = (centerCell: IBoardCell) => [\n    [\n      centerCell,\n      getNeighborCell(centerCell, 1, 0),\n      getNeighborCell(centerCell, 0, 1),\n      getNeighborCell(centerCell, 1, 1),\n    ],\n  ];\n\n  stateCount = 1;\n\n  constructor(centerCell: IBoardCell) {\n    super(centerCell);\n\n    this.cells = this.cellStates(this.centerCell)[this.currentState];\n  }\n}\n","import Tetromino from './BaseTetromino';\nimport { IBoardCell } from 'types/interfaces/IBoardCell';\nimport { getNeighborCell } from 'utils/cellUtil';\n\nexport default class Tetromino_S extends Tetromino {\n  cellStates = (centerCell: IBoardCell) => [\n    [\n      centerCell,\n      getNeighborCell(centerCell, 1, 0),\n      getNeighborCell(centerCell, 0, 1),\n      getNeighborCell(centerCell, -1, 1),\n    ],\n    [\n      centerCell,\n      getNeighborCell(centerCell, 0, -1),\n      getNeighborCell(centerCell, 1, 0),\n      getNeighborCell(centerCell, 1, 1),\n    ],\n  ];\n\n  stateCount = 2;\n\n  constructor(centerCell: IBoardCell) {\n    super(centerCell);\n\n    this.cells = this.cellStates(this.centerCell)[this.currentState];\n  }\n}\n","import Tetromino from './BaseTetromino';\nimport { IBoardCell } from 'types/interfaces/IBoardCell';\nimport { getNeighborCell } from 'utils/cellUtil';\n\nexport default class Tetromino_Z extends Tetromino {\n  cellStates = (centerCell: IBoardCell) => [\n    [\n      centerCell,\n      getNeighborCell(centerCell, -1, 0),\n      getNeighborCell(centerCell, 0, 1),\n      getNeighborCell(centerCell, 1, 1),\n    ],\n    [\n      centerCell,\n      getNeighborCell(centerCell, 1, 0),\n      getNeighborCell(centerCell, 1, -1),\n      getNeighborCell(centerCell, 0, 1),\n    ],\n  ];\n\n  stateCount = 2;\n\n  constructor(centerCell: IBoardCell) {\n    super(centerCell);\n\n    this.cells = this.cellStates(this.centerCell)[this.currentState];\n  }\n}\n","import Tetromino from './BaseTetromino';\nimport { IBoardCell } from 'types/interfaces/IBoardCell';\nimport { getNeighborCell } from 'utils/cellUtil';\n\nexport default class Tetromino_I extends Tetromino {\n  cellStates = (centerCell: IBoardCell) => [\n    [\n      centerCell,\n      getNeighborCell(centerCell, 0, -1),\n      getNeighborCell(centerCell, 0, 1),\n      getNeighborCell(centerCell, 0, 2),\n    ],\n    [\n      getNeighborCell(centerCell, -1, 0),\n      centerCell,\n      getNeighborCell(centerCell, 1, 0),\n      getNeighborCell(centerCell, 2, 0),\n    ],\n  ];\n\n  stateCount = 2;\n\n  constructor(centerCell: IBoardCell) {\n    super(centerCell);\n\n    this.cells = this.cellStates(this.centerCell)[this.currentState];\n  }\n}\n","import Tetromino from './BaseTetromino';\nimport { IBoardCell } from 'types/interfaces/IBoardCell';\nimport { getNeighborCell } from 'utils/cellUtil';\n\nexport default class Tetromino_L extends Tetromino {\n  cellStates = (centerCell: IBoardCell) => [\n    [\n      centerCell,\n      getNeighborCell(centerCell, 0, -1),\n      getNeighborCell(centerCell, 0, 1),\n      getNeighborCell(centerCell, 1, 1),\n    ],\n    [\n      centerCell,\n      getNeighborCell(centerCell, 1, 0),\n      getNeighborCell(centerCell, 1, -1),\n      getNeighborCell(centerCell, -1, 0),\n    ],\n    [\n      centerCell,\n      getNeighborCell(centerCell, 0, -1),\n      getNeighborCell(centerCell, -1, -1),\n      getNeighborCell(centerCell, 0, 1),\n    ],\n    [\n      centerCell,\n      getNeighborCell(centerCell, 1, 0),\n      getNeighborCell(centerCell, -1, 0),\n      getNeighborCell(centerCell, -1, 1),\n    ],\n  ];\n\n  stateCount = 4;\n\n  constructor(centerCell: IBoardCell) {\n    super(centerCell);\n\n    this.cells = this.cellStates(this.centerCell)[this.currentState];\n  }\n}\n","import Tetromino from './BaseTetromino';\nimport { IBoardCell } from 'types/interfaces/IBoardCell';\nimport { getNeighborCell } from 'utils/cellUtil';\n\nexport default class Tetromino_J extends Tetromino {\n  cellStates = (centerCell: IBoardCell) => [\n    [\n      centerCell,\n      getNeighborCell(centerCell, 0, -1),\n      getNeighborCell(centerCell, 0, 1),\n      getNeighborCell(centerCell, -1, 1),\n    ],\n    [\n      centerCell,\n      getNeighborCell(centerCell, 1, 0),\n      getNeighborCell(centerCell, 1, 1),\n      getNeighborCell(centerCell, -1, 0),\n    ],\n    [\n      centerCell,\n      getNeighborCell(centerCell, 0, -1),\n      getNeighborCell(centerCell, 1, -1),\n      getNeighborCell(centerCell, 0, 1),\n    ],\n    [\n      centerCell,\n      getNeighborCell(centerCell, 1, 0),\n      getNeighborCell(centerCell, -1, 0),\n      getNeighborCell(centerCell, -1, -1),\n    ],\n  ];\n\n  stateCount = 4;\n\n  constructor(centerCell: IBoardCell) {\n    super(centerCell);\n\n    this.cells = this.cellStates(this.centerCell)[this.currentState];\n  }\n}\n","import BaseTetromino from './BaseTetromino';\nimport Tetromino_T from './Tetromino_T';\nimport Tetromino_D from './Tetromino_D';\nimport Tetromino_S from './Tetromino_S';\nimport Tetromino_Z from './Tetromino_Z';\nimport Tetromino_I from './Tetromino_I';\nimport Tetromino_L from './Tetromino_L';\nimport Tetromino_J from './Tetromino_J';\n\nimport { IBoardCell } from 'types/interfaces/IBoardCell';\n\nimport { TETROMINO_COLOR_PALLETTE } from 'constants/generalConstants';\n\nexport default class TetrominoBuilder {\n  private tetromino: BaseTetromino;\n\n  constructor(centerCell: IBoardCell) {\n    this.tetromino = this.buildNextTetromino({\n      ...centerCell,\n      color:\n        TETROMINO_COLOR_PALLETTE[\n          Math.round(Math.random() * (TETROMINO_COLOR_PALLETTE.length - 1))\n        ],\n    });\n  }\n\n  private buildNextTetromino(centerCell: IBoardCell): BaseTetromino {\n    const tetrominoes: BaseTetromino[] = [\n      new Tetromino_T(centerCell),\n      new Tetromino_D(centerCell),\n      new Tetromino_S(centerCell),\n      new Tetromino_Z(centerCell),\n      new Tetromino_I(centerCell),\n      new Tetromino_L(centerCell),\n      new Tetromino_J(centerCell),\n    ];\n\n    // TODO: create with also randomized state\n    return tetrominoes[Math.round(Math.random() * (tetrominoes.length - 1))];\n  }\n\n  public getTetromino() {\n    return this.tetromino;\n  }\n}\n","import { IBoardCell } from 'types/interfaces/IBoardCell';\nimport { SpeedSetting } from 'types';\nimport { NORMAL_GAME_SPEED } from 'constants/generalConstants';\n\nimport BaseTetromino from './tetrominoes/BaseTetromino';\nimport TetrominoBuilder from './tetrominoes/TetrominoBuilder';\n\nexport const generateTetromino = (cellColCount: number): BaseTetromino => {\n  const builder = new TetrominoBuilder({\n    xPosition: Math.floor(cellColCount / 2),\n    yPosition: 0,\n  });\n\n  return builder.getTetromino();\n};\n\nexport const getNeighborCell = (\n  { xPosition, yPosition, ...others }: IBoardCell,\n  xMovement: number,\n  yMovement: number,\n): IBoardCell => {\n  return {\n    ...others,\n    xPosition: xPosition + xMovement,\n    yPosition: yPosition + yMovement,\n  };\n};\n\nexport const getNeighborCells = (\n  cells: IBoardCell[],\n  xMovement: number,\n  yMovement: number,\n): IBoardCell[] => {\n  return cells.map(\n    ({ xPosition, yPosition, ...others }): IBoardCell => ({\n      ...others,\n      xPosition: xPosition + xMovement,\n      yPosition: yPosition + yMovement,\n    }),\n  );\n};\n\nexport const moveLeft = (tetromino: BaseTetromino): BaseTetromino => {\n  const cells = tetromino.getCells();\n\n  if (cells.every((cell) => cell.xPosition !== 0)) {\n    tetromino.moveTetromino(-1, 0);\n  }\n\n  return tetromino;\n};\n\nexport const moveRight = (\n  tetromino: BaseTetromino,\n  cellColCount: number,\n): BaseTetromino => {\n  const cells = tetromino.getCells();\n\n  if (cells.every((cell) => cell.xPosition < cellColCount - 1)) {\n    tetromino.moveTetromino(1, 0);\n  }\n\n  return tetromino;\n};\n\nexport const moveDown = (\n  tetromino: BaseTetromino,\n  cellRowCount: number,\n): BaseTetromino => {\n  const cells = tetromino.getCells();\n\n  if (cells.every((cell) => cell.yPosition < cellRowCount - 1)) {\n    tetromino.moveTetromino(0, 1);\n  }\n\n  return tetromino;\n};\n\nexport const checkCollision = (\n  upcomingCells: IBoardCell[],\n  cells: IBoardCell[],\n  cellRowCount: number,\n  cellColCount: number,\n): boolean => {\n  const anyCollision: boolean = upcomingCells.some((upcomingCell) =>\n    cellsIncludes(cells, upcomingCell),\n  );\n\n  const isAtBottomEdge: boolean = upcomingCells.some(\n    (upcomingCell) => upcomingCell.yPosition === cellRowCount,\n  );\n\n  const isExceedRightSide: boolean = upcomingCells.some(\n    (upcomingCell) => upcomingCell.xPosition >= cellColCount,\n  );\n\n  const isExceedLeftSide: boolean = upcomingCells.some(\n    (upcomingCell) => upcomingCell.xPosition < 0,\n  );\n\n  return (\n    anyCollision || isAtBottomEdge || isExceedRightSide || isExceedLeftSide\n  );\n};\n\nexport const cellsIncludes = (\n  cells: IBoardCell[],\n  otherCell: IBoardCell,\n): boolean => {\n  return cells.some(\n    (cell) =>\n      cell.xPosition === otherCell.xPosition &&\n      cell.yPosition === otherCell.yPosition,\n  );\n};\n\nexport const clearFullRows = (\n  cells: IBoardCell[],\n  cellRowCount: number,\n  cellColCount: number,\n): IBoardCell[] => {\n  const colCounts = Array(cellRowCount).fill(0);\n\n  for (let cell of cells) {\n    colCounts[cell.yPosition]++;\n  }\n\n  for (let row = 0; row < cellRowCount; row++) {\n    if (colCounts[row] === cellColCount) {\n      cells = cells\n        .filter((cell) => cell.yPosition !== row)\n        .map(\n          ({ yPosition, ...others }): IBoardCell => ({\n            ...others,\n            yPosition: yPosition < row ? yPosition + 1 : yPosition,\n          }),\n        );\n    }\n  }\n\n  return cells;\n};\n\nexport const is_touch_device = () => {\n  var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\n  var mq = function (query: string) {\n    return window.matchMedia(query).matches;\n  };\n\n  if ('ontouchstart' in window) {\n    return true;\n  }\n\n  // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n  // https://git.io/vznFH\n  var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\n  return mq(query);\n};\n\nexport const toGameSpeed = (speed: SpeedSetting) => {\n  if (speed === 'slow') {\n    return NORMAL_GAME_SPEED * 2;\n  } else if (speed === 'normal') {\n    return NORMAL_GAME_SPEED;\n  }\n\n  return NORMAL_GAME_SPEED / 2;\n};\n","import React, { Component } from 'react';\n\nimport './keyboard-manager.scss';\nimport { is_touch_device } from 'utils/cellUtil';\nimport { IKeyboardManagerProps } from 'types/interfaces/IKeyboarManagerProps';\nimport { IKeyboardManagerState } from 'types/interfaces/IKeyboarManagerState';\n\nclass KeyboardManager extends Component<\n  IKeyboardManagerProps,\n  IKeyboardManagerState\n> {\n  state = {\n    pressedKey: '',\n  };\n\n  private middleEl: React.RefObject<HTMLInputElement>;\n\n  constructor(props: IKeyboardManagerProps) {\n    super(props);\n\n    this.middleEl = React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('keyup', this.onKeyUp);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.onKeyDown);\n    window.removeEventListener('keyup', this.onKeyUp);\n  }\n\n  onKeyDown = ({ key }: KeyboardEvent) => {\n    const { pressedKeys } = this.props;\n\n    this.props.onKeysChanged(\n      pressedKeys.includes(key) ? pressedKeys : [...pressedKeys, key],\n    );\n  };\n\n  onKeyUp = ({ key }: KeyboardEvent) => {\n    const { pressedKeys } = this.props;\n\n    this.props.onKeysChanged(\n      pressedKeys.filter((pressedKey) => pressedKey !== key),\n    );\n  };\n\n  onClickButton = (event: React.TouchEvent<HTMLElement>) => {\n    const middleElBounds = (this.middleEl\n      .current as HTMLDivElement).getBoundingClientRect();\n\n    const middleXPos = middleElBounds.left + middleElBounds.width / 2;\n    const middleYPos = middleElBounds.top + middleElBounds.height / 2;\n\n    const xPosDifference = event.touches[0].clientX - middleXPos;\n    const yPosDifference = event.touches[0].clientY - middleYPos;\n    let pressedKey = '';\n\n    if (xPosDifference > 0) {\n      pressedKey = 'ArrowRight';\n\n      if (Math.abs(yPosDifference) > xPosDifference && yPosDifference > 0) {\n        pressedKey = 'ArrowDown';\n      } else if (\n        Math.abs(yPosDifference) > xPosDifference &&\n        yPosDifference < 0\n      ) {\n        pressedKey = 'ArrowUp';\n      }\n    } else if (xPosDifference < 0) {\n      pressedKey = 'ArrowLeft';\n\n      if (Math.abs(yPosDifference) > -xPosDifference && yPosDifference > 0) {\n        pressedKey = 'ArrowDown';\n      } else if (\n        Math.abs(yPosDifference) > -xPosDifference &&\n        yPosDifference < 0\n      ) {\n        pressedKey = 'ArrowUp';\n      }\n    }\n\n    this.setState({ pressedKey }, () => {\n      const { pressedKeys } = this.props;\n\n      this.props.onKeysChanged(\n        pressedKeys.includes(this.state.pressedKey)\n          ? pressedKeys\n          : [...pressedKeys, this.state.pressedKey],\n      );\n    });\n  };\n\n  generateClassName = () => {\n    const { pressedKey } = this.state;\n\n    switch (pressedKey) {\n      case 'ArrowUp':\n        return 'joystick-container up';\n      case 'ArrowDown':\n        return 'joystick-container down';\n      case 'ArrowLeft':\n        return 'joystick-container left';\n      case 'ArrowRight':\n        return 'joystick-container right';\n      default:\n        return 'joystick-container';\n    }\n  };\n\n  render() {\n    const containerClassNames = is_touch_device()\n      ? 'manager-container touchable'\n      : 'manager-container';\n\n    return (\n      <div className={containerClassNames}>\n        <div\n          className={this.generateClassName()}\n          onTouchEnd={() =>\n            this.setState({ pressedKey: '' }, () => {\n              this.props.onKeysChanged([]);\n            })\n          }\n          onTouchStart={this.onClickButton}\n        >\n          <div className=\"arrow-up\">▲</div>\n          <div className=\"middle-arrows\">\n            <div className=\"arrow-left\">◀</div>\n            <div className=\"arrow-middle\">\n              <div ref={this.middleEl} className=\"middle-circle\"></div>\n            </div>\n            <div className=\"arrow-right\">▶</div>\n          </div>\n          <div className=\"arrow-down\">▼</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default KeyboardManager;\n","import React, { Component } from 'react';\n\nimport GameBoard from 'components/game-board/GameBoard';\nimport KeyboardManager from 'components/keyboard-manager/KeyboardManager';\n\nimport BaseTetromino from 'utils/tetrominoes/BaseTetromino';\nimport {\n  moveDown,\n  moveLeft,\n  moveRight,\n  checkCollision,\n  getNeighborCells,\n  clearFullRows,\n  generateTetromino,\n  toGameSpeed,\n} from 'utils/cellUtil';\n\nimport './play.scss';\nimport { SpeedSetting } from 'types';\nimport { IPlayProps } from 'types/interfaces/IPlayProps';\nimport { IPlayState } from 'types/interfaces/IPlayState';\n\nclass Play extends Component<IPlayProps, IPlayState> {\n  state: IPlayState = {\n    cells: [],\n    isGameOver: false,\n    isGameStart: false,\n    pressedKeys: [],\n    tetromino: undefined,\n  };\n\n  lastTime: number = 0;\n  animationFrame: number = -1;\n\n  componentDidMount() {\n    if (this.state.isGameStart) {\n      this.gameLoop(-1, this.props.speed);\n    }\n  }\n\n  componentWillUnmount() {\n    window.cancelAnimationFrame(this.animationFrame);\n  }\n\n  gameLoop = (time: number, speed: SpeedSetting) => {\n    if (!this.lastTime || time - this.lastTime >= toGameSpeed(speed)) {\n      this.setState(\n        ({ tetromino, cells, isGameStart }) => {\n          if (!isGameStart) {\n            return null;\n          } else {\n            let newTetromino = tetromino;\n            let gameOver = false;\n\n            if (!newTetromino) {\n              newTetromino = generateTetromino(this.props.cellColCount);\n            }\n\n            if (\n              checkCollision(\n                getNeighborCells(newTetromino.getCells(), 0, 1),\n                cells,\n                this.props.cellRowCount,\n                this.props.cellColCount,\n              )\n            ) {\n              cells = [...cells, ...newTetromino.getCells()];\n\n              newTetromino = generateTetromino(this.props.cellColCount);\n\n              if (\n                checkCollision(\n                  getNeighborCells(newTetromino.getCells(), 0, 0),\n                  cells,\n                  this.props.cellRowCount,\n                  this.props.cellColCount,\n                )\n              ) {\n                newTetromino = undefined;\n                gameOver = true;\n              }\n            } else {\n              newTetromino = moveDown(newTetromino, this.props.cellRowCount);\n            }\n\n            return {\n              cells: clearFullRows(\n                cells,\n                this.props.cellRowCount,\n                this.props.cellColCount,\n              ),\n              isGameOver: gameOver,\n              tetromino: newTetromino,\n              pressedKeys: [],\n            };\n          }\n        },\n        () => {\n          this.lastTime = time;\n          this.animationFrame = window.requestAnimationFrame((time) =>\n            this.gameLoop(time, this.props.speed),\n          );\n        },\n      );\n    } else {\n      this.animationFrame = window.requestAnimationFrame((time) =>\n        this.gameLoop(time, this.props.speed),\n      );\n    }\n  };\n\n  onKeysChanged = (keys: String[], speed: SpeedSetting) => {\n    this.setState(\n      ({ tetromino }) => {\n        if (tetromino) {\n          return {\n            tetromino: this.computeNewPosition(tetromino, keys),\n            pressedKeys: keys,\n          };\n        }\n\n        return {\n          pressedKeys: keys,\n        };\n      },\n      () => {\n        if (keys.includes('p') || keys.includes('p')) {\n          this.toggleGameStart(speed);\n        }\n      },\n    );\n  };\n\n  computeNewPosition = (\n    tetromino: BaseTetromino,\n    pressedKeys: String[],\n  ): BaseTetromino => {\n    let newTetromino: BaseTetromino | null = tetromino;\n\n    if (newTetromino) {\n      if (\n        pressedKeys.includes('ArrowRight') &&\n        !checkCollision(\n          getNeighborCells(newTetromino.getCells(), 1, 0),\n          this.state.cells,\n          this.props.cellRowCount,\n          this.props.cellColCount,\n        )\n      ) {\n        newTetromino = moveRight(tetromino, this.props.cellColCount);\n      }\n\n      if (\n        pressedKeys.includes('ArrowLeft') &&\n        !checkCollision(\n          getNeighborCells(newTetromino.getCells(), -1, 0),\n          this.state.cells,\n          this.props.cellRowCount,\n          this.props.cellColCount,\n        )\n      ) {\n        newTetromino = moveLeft(newTetromino);\n      }\n\n      if (\n        pressedKeys.includes('ArrowDown') &&\n        !checkCollision(\n          getNeighborCells(newTetromino.getCells(), 0, 1),\n          this.state.cells,\n          this.props.cellRowCount,\n          this.props.cellColCount,\n        )\n      ) {\n        newTetromino = moveDown(newTetromino, this.props.cellRowCount);\n      }\n\n      if (\n        pressedKeys.includes('ArrowUp') &&\n        !checkCollision(\n          newTetromino.getNextStateCells(),\n          this.state.cells,\n          this.props.cellRowCount,\n          this.props.cellColCount,\n        )\n      ) {\n        newTetromino = tetromino.nextState();\n      }\n    }\n\n    return newTetromino;\n  };\n\n  toggleGameStart = (speed: SpeedSetting) => {\n    this.setState(\n      ({ isGameStart }) => ({ isGameStart: !isGameStart }),\n      () => {\n        if (this.state.isGameStart) {\n          this.gameLoop(-1, speed);\n        }\n      },\n    );\n  };\n\n  restartGame = (speed: SpeedSetting) => {\n    this.setState(\n      {\n        cells: [],\n        isGameOver: false,\n        isGameStart: true,\n        pressedKeys: [],\n        tetromino: undefined,\n      },\n      () => {\n        this.gameLoop(-1, speed);\n      },\n    );\n  };\n\n  render() {\n    const {\n      cells,\n      pressedKeys,\n      tetromino,\n      isGameStart,\n      isGameOver,\n    } = this.state;\n\n    return (\n      <div className=\"play-container\">\n        {(isGameOver && (\n          <div className=\"game-over-container\">\n            <div className=\"game-over-title\">Game Over</div>\n            <div\n              className=\"game-over-restart\"\n              onClick={() => this.restartGame(this.props.speed)}\n            >\n              Restart\n            </div>\n          </div>\n        )) || (\n          <>\n            <div className=\"start-stop-button-container\">\n              <div className=\"start-stop-button-title\">\n                {!isGameStart ? 'Game Start' : 'Game Pause'}\n              </div>\n              <div\n                className=\"start-stop-button\"\n                onClick={() => this.toggleGameStart(this.props.speed)}\n              >\n                <div\n                  className={'inner ' + (isGameStart ? 'start' : 'pause')}\n                ></div>\n              </div>\n            </div>\n            <KeyboardManager\n              pressedKeys={pressedKeys}\n              onKeysChanged={(key) => this.onKeysChanged(key, this.props.speed)}\n            ></KeyboardManager>\n            <GameBoard tetromino={tetromino} cells={[...cells]}></GameBoard>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Play;\n","import React, { useContext } from 'react';\n\nimport { GameSettingsContext } from 'hooks/useGameSettings';\nimport './settings.scss';\n\nconst Settings: React.FC = () => {\n  const {\n    gameSettings: {\n      cellRowCount,\n      cellColCount,\n      cellRadius,\n      boardHeight,\n      boardWidth,\n      speed,\n    },\n    updateRowCount,\n    updateColCount,\n    updateCellRadius,\n    updateBoardWidth,\n    updateBoardHeight,\n    updateAnimationSpeed,\n    resetSettings,\n  } = useContext(GameSettingsContext);\n  return (\n    <div className=\"settings-container\">\n      <div className=\"nes-container with-title is-centered\">\n        <p className=\"title nes-text is-primary\">\n          <i className=\"nes-logo\"></i>\n        </p>\n        <div className=\"nes-container-body\">\n          <div className=\"nes-field\">\n            <label htmlFor=\"board-width\">Board Width</label>\n            <input\n              type=\"number\"\n              id=\"board-width\"\n              value={boardWidth}\n              onChange={(e) => {\n                updateBoardWidth(Number(e.target.value));\n              }}\n              className=\"nes-input\"\n            />\n          </div>\n          <div className=\"nes-field\">\n            <label htmlFor=\"board-height\">Board Height</label>\n            <input\n              type=\"number\"\n              id=\"board-height\"\n              value={boardHeight}\n              onChange={(e) => {\n                updateBoardHeight(Number(e.target.value));\n              }}\n              className=\"nes-input\"\n            />\n          </div>\n          <div className=\"nes-field\">\n            <label htmlFor=\"column\">Number of row</label>\n            <input\n              type=\"number\"\n              id=\"column\"\n              value={cellRowCount}\n              onChange={(e) => {\n                updateRowCount(Number(e.target.value));\n              }}\n              className=\"nes-input\"\n            />\n          </div>\n          <div className=\"nes-field\">\n            <label htmlFor=\"row\">Number of columns</label>\n            <input\n              type=\"number\"\n              id=\"row\"\n              value={cellColCount}\n              onChange={(e) => {\n                updateColCount(Number(e.target.value));\n              }}\n              className=\"nes-input\"\n            />\n          </div>\n          <div className=\"nes-field\">\n            <label htmlFor=\"radius\">Radius of each cell</label>\n            <input\n              type=\"number\"\n              id=\"radius\"\n              value={cellRadius}\n              onChange={(e) => {\n                updateCellRadius(Number(e.target.value));\n              }}\n              className=\"nes-input\"\n            />\n          </div>\n          <div className=\"nes-field\">\n            <label htmlFor=\"answer\">Animation Speed</label>\n            <div className=\"nes-radio-container\">\n              <label className=\"nes-radio-label\">\n                <input\n                  type=\"radio\"\n                  className=\"nes-radio\"\n                  name=\"answer\"\n                  onChange={() => {\n                    updateAnimationSpeed('slow');\n                  }}\n                  checked={speed === 'slow'}\n                />\n                <span>Slow</span>\n              </label>\n              <label className=\"nes-radio-label\">\n                <input\n                  type=\"radio\"\n                  className=\"nes-radio\"\n                  name=\"answer\"\n                  onChange={() => {\n                    updateAnimationSpeed('normal');\n                  }}\n                  checked={speed === 'normal'}\n                />\n                <span>Normal</span>\n              </label>\n              <label className=\"nes-radio-label\">\n                <input\n                  type=\"radio\"\n                  className=\"nes-radio\"\n                  name=\"answer\"\n                  onChange={() => {\n                    updateAnimationSpeed('fast');\n                  }}\n                  checked={speed === 'fast'}\n                />\n                <span>Fast</span>\n              </label>\n            </div>\n          </div>\n          <section>\n            <button\n              type=\"button\"\n              className=\"nes-btn\"\n              onClick={() => {\n                (document.getElementById(\n                  'dialog-default',\n                ) as HTMLDialogElement).showModal();\n              }}\n            >\n              Reset\n            </button>\n            <dialog className=\"nes-dialog is-centered\" id=\"dialog-default\">\n              <form method=\"dialog\">\n                <p className=\"title\">Are you sure?</p>\n                <menu className=\"dialog-menu\">\n                  <button className=\"nes-btn\">No</button>\n                  <button\n                    className=\"nes-btn is-primary\"\n                    onClick={resetSettings}\n                  >\n                    Yes\n                  </button>\n                </menu>\n              </form>\n            </dialog>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n","import React, { useContext } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Header from 'components/header/Header';\nimport Home from 'views/home/Home';\nimport Play from 'views/play/Play';\nimport Settings from 'views/settings/Settings';\nimport { GameSettingsContext } from 'hooks/useGameSettings';\n\nconst Routes: React.FC = () => {\n  const {\n    gameSettings: { speed, cellRowCount, cellColCount },\n  } = useContext(GameSettingsContext);\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Header />\n      <div className=\"view-container\">\n        <Route exact path=\"/\" component={Home} />\n        <Route\n          path=\"/play\"\n          component={() => (\n            <Play\n              speed={speed}\n              cellColCount={cellColCount}\n              cellRowCount={cellRowCount}\n            />\n          )}\n        />\n        <Route path=\"/settings\" component={Settings} />\n      </div>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport './App.scss';\nimport Routes from 'routes';\nimport { GameSettingsContext, useGameSettings } from 'hooks/useGameSettings';\n\nconst App: React.FC = () => {\n  const gameSettings = useGameSettings();\n\n  return (\n    <GameSettingsContext.Provider value={gameSettings}>\n      <Routes></Routes>\n    </GameSettingsContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n\nimport App from './views/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}